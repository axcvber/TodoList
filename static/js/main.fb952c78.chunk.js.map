{"version":3,"sources":["App.tsx","components/ListItem.tsx","components/TaskField.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","text","completed","tasks","setTasks","onToggleCompleted","index","prevTasks","map","task","curIdx","onRemoveTask","filter","_","className","onAddTask","item","length","onClick","global","confirm","ListItem","TaskField","setText","addTask","alert","type","value","onChange","e","currentTarget","placeholder","onKeyPress","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAuFeA,IA9EO,WAAO,IAAD,EACAC,mBAA2B,CACnD,CACEC,KAAM,qDACNC,WAAW,KAJW,mBACnBC,EADmB,KACZC,EADY,KAkBpBC,EAAoB,SAACC,GACzBF,GAAS,SAACG,GAAD,OACPA,EAAUC,KAAI,SAACC,EAAMC,GAAP,OACZJ,IAAUI,EAAV,2BAESD,GAFT,IAGMP,WAAYO,EAAKP,YAEnBO,SAKJE,EAAe,SAACL,GACpBF,GAAS,SAACG,GAAD,OAAeA,EAAUK,QAAO,SAACC,EAAGH,GAAJ,OAAeJ,IAAUI,SAWpE,OACE,qBAAKI,UAAU,cAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,uGAGF,cAAC,IAAD,CAAWC,UA1CC,SAACd,GACjBG,GAAS,SAACG,GAAD,4BACJA,GADI,CAEP,CACEN,OACAC,WAAW,WAuCX,sBAAKY,UAAU,aAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,yFAAeX,EAAMS,QAAO,SAACI,GAAD,OAAUA,EAAKd,aAAWe,UACtD,gGAAiBd,EAAMc,aAGxBd,EAAMK,KAAI,SAACC,EAAMH,GAAP,OACT,cAAC,IAAD,CAEEA,MAAOA,EACPL,KAAMQ,EAAKR,KACXC,UAAWO,EAAKP,UAChBG,kBAAmBA,EACnBM,aAAcA,GALTL,MAQT,sBAAKQ,UAAU,uBAAf,UACE,+CACA,wBAAQI,QAnCE,WACdf,EAAMc,QACJE,EAAOC,QAAQ,0MACjBhB,EAAS,KAgCL,+F,kDC/EZ,mCAqCeiB,IA1BuB,SAAC,GAAiE,IAA/DpB,EAA8D,EAA9DA,KAAMK,EAAwD,EAAxDA,MAAOJ,EAAiD,EAAjDA,UAAWG,EAAsC,EAAtCA,kBAAmBM,EAAmB,EAAnBA,aAWlF,OACE,sBAAKG,UAAS,0BAAqBZ,EAAY,6BAA+B,IAA9E,UACE,qBAAKgB,QAZe,WACtBb,EAAkBC,IAWeQ,UAAU,wBAAzC,SACGZ,EACC,cAAC,IAAD,CAAYY,UAAW,oCAEvB,cAAC,IAAD,CAAwBA,UAAW,uCAGvC,mBAAGA,UAAU,uBAAb,SAAqCb,IACrC,cAAC,IAAD,CAAUiB,QAhBK,WACbC,EAAOC,QAAQ,sNACjBT,EAAaL,IAckBQ,UAAU,iC,8FCUhCQ,IAnCwB,SAAC,GAAmB,IAAjBP,EAAgB,EAAhBA,UAAgB,EAChCf,mBAAiB,IADe,mBACjDC,EADiD,KAC3CsB,EAD2C,KAOlDC,EAAU,WACVvB,EAAKgB,OAAS,GAChBF,EAAUd,GACVsB,EAAQ,KAERJ,EAAOM,MAAM,oFASjB,OACE,sBAAKX,UAAU,kBAAf,UACE,uBACEY,KAAK,OACLC,MAAO1B,EACP2B,SAvBoB,SAACC,GACzBN,EAAQM,EAAEC,cAAcH,QAuBpBI,YAAY,oHACZC,WAZc,SAACH,GACL,UAAVA,EAAEI,KACJT,OAYA,cAAC,IAAD,CAAOV,UAAU,yBAAyBI,QAASM,U,iICvB1CU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC9C,EAAA,EAAD,MAEF+C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb952c78.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ListItem from './components/ListItem'\nimport TaskField from './components/TaskField'\n\ntype StateType = {\n  text: string\n  completed: boolean\n}\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<Array<StateType>>([\n    {\n      text: 'Изучить ReactJS',\n      completed: false,\n    },\n  ])\n\n  const onAddTask = (text: string) => {\n    setTasks((prevTasks) => [\n      ...prevTasks,\n      {\n        text,\n        completed: false,\n      },\n    ])\n  }\n\n  const onToggleCompleted = (index: number) => {\n    setTasks((prevTasks) =>\n      prevTasks.map((task, curIdx) =>\n        index === curIdx\n          ? {\n              ...task,\n              completed: !task.completed,\n            }\n          : task\n      )\n    )\n  }\n\n  const onRemoveTask = (index: number) => {\n    setTasks((prevTasks) => prevTasks.filter((_, curIdx) => index !== curIdx))\n  }\n\n  const onClearTodo = () => {\n    if (tasks.length) {\n      if (global.confirm('Вы действительно хотите все очистить?')) {\n        setTasks([])\n      }\n    }\n  }\n\n  return (\n    <div className='app-wrapper'>\n      <div className='todo'>\n        <div className='todo__header'>\n          <h3>Список задач</h3>\n        </div>\n\n        <TaskField onAddTask={onAddTask} />\n\n        <div className='todo__list'>\n          <div className='todo__list-all-task'>\n            <p>Выполнено: {tasks.filter((item) => item.completed).length}</p>\n            <p>Всего задач: {tasks.length}</p>\n          </div>\n\n          {tasks.map((task, index) => (\n            <ListItem\n              key={index}\n              index={index}\n              text={task.text}\n              completed={task.completed}\n              onToggleCompleted={onToggleCompleted}\n              onRemoveTask={onRemoveTask}\n            />\n          ))}\n          <div className='todo__list-clear-all'>\n            <p>Todo List v1.0</p>\n            <button onClick={onClearTodo}>Очистить все</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\r\nimport { MdDelete, MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md'\r\n\r\ntype PropTypes = {\r\n  text: string\r\n  index: number\r\n  completed: boolean\r\n  onToggleCompleted: (index: number) => void\r\n  onRemoveTask: (index: number) => void\r\n}\r\n\r\nconst ListItem: React.FC<PropTypes> = ({ text, index, completed, onToggleCompleted, onRemoveTask }) => {\r\n  const toggleCompleted = () => {\r\n    onToggleCompleted(index)\r\n  }\r\n\r\n  const removeTask = () => {\r\n    if (global.confirm('Вы действительно хотите удалить задачу?')) {\r\n      onRemoveTask(index)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`todo__list-item ${completed ? 'todo__list-item--completed' : ''}`}>\r\n      <div onClick={toggleCompleted} className='todo__list-item-check'>\r\n        {completed ? (\r\n          <MdCheckBox className={'todo__list-item-check-done-icon'} />\r\n        ) : (\r\n          <MdCheckBoxOutlineBlank className={'todo__list-item-check-empty-icon'} />\r\n        )}\r\n      </div>\r\n      <p className='todo__list-item-text'>{text}</p>\r\n      <MdDelete onClick={removeTask} className='todo__list-item-remove' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListItem\r\n","import React, { useState } from 'react'\r\nimport { MdAdd } from 'react-icons/md'\r\n\r\ntype PropsType = {\r\n  onAddTask: (text: string) => void\r\n}\r\n\r\nconst TaskField: React.FC<PropsType> = ({ onAddTask }) => {\r\n  const [text, setText] = useState<string>('')\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.currentTarget.value)\r\n  }\r\n\r\n  const addTask = () => {\r\n    if (text.length > 0) {\r\n      onAddTask(text)\r\n      setText('')\r\n    } else {\r\n      global.alert('Введите задачу')\r\n    }\r\n  }\r\n\r\n  const handleKeyUp = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      addTask()\r\n    }\r\n  }\r\n  return (\r\n    <div className='todo__add-field'>\r\n      <input\r\n        type='text'\r\n        value={text}\r\n        onChange={handleInputChange}\r\n        placeholder='Введите текст задачи...'\r\n        onKeyPress={handleKeyUp}\r\n      />\r\n      <MdAdd className='todo__add-field-button' onClick={addTask} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskField\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/app.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}